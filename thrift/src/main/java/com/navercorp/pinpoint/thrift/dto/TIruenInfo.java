/**
 * Autogenerated by Thrift Compiler (0.9.3)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package com.navercorp.pinpoint.thrift.dto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-02-26")
public class TIruenInfo implements org.apache.thrift.TBase<TIruenInfo, TIruenInfo._Fields>, java.io.Serializable, Cloneable, Comparable<TIruenInfo> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TIruenInfo");

    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("userName", org.apache.thrift.protocol.TType.STRING, (short) 1);
    private static final org.apache.thrift.protocol.TField USER_PASS_FIELD_DESC = new org.apache.thrift.protocol.TField("userPass", org.apache.thrift.protocol.TType.STRING, (short) 2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

    static {
        schemes.put(StandardScheme.class, new TIruenInfoStandardSchemeFactory());
        schemes.put(TupleScheme.class, new TIruenInfoTupleSchemeFactory());
    }

    public String userName; // optional
    public String userPass; // optional

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        USER_NAME((short) 1, "userName"),
        USER_PASS((short) 2, "userPass");

        private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

        static {
            for (_Fields field : EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
                case 1: // USER_NAME
                    return USER_NAME;
                case 2: // USER_PASS
                    return USER_PASS;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        public static _Fields findByName(String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final String _fieldName;

        _Fields(short thriftId, String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments
    private static final _Fields optionals[] = {_Fields.USER_NAME, _Fields.USER_PASS};
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

    static {
        Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("userName", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.USER_PASS, new org.apache.thrift.meta_data.FieldMetaData("userPass", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        metaDataMap = Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TIruenInfo.class, metaDataMap);
    }

    public TIruenInfo(String userName, String userPass) {
        this.userName = userName;
        this.userPass = userPass;
    }

    public TIruenInfo() {


    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public TIruenInfo(TIruenInfo other) {
        if (other.isSetUserName()) {
            this.userName = other.userName;
        }
        if (other.isSetUserPass()) {
            this.userPass = other.userPass;
        }
    }

    public TIruenInfo deepCopy() {
        return new TIruenInfo(this);
    }

    @Override
    public void clear() {
        this.userName = null;
        this.userPass = null;
    }

    public String getUserName() {
        return this.userName;
    }

    public TIruenInfo setUserName(String userName) {
        this.userName = userName;
        return this;
    }

    public void unsetUserName() {
        this.userName = null;
    }

    /** Returns true if field userName is set (has been assigned a value) and false otherwise */
    public boolean isSetUserName() {
        return this.userName != null;
    }

    public void setUserNameIsSet(boolean value) {
        if (!value) {
            this.userName = null;
        }
    }

    public String getUserPass() {
        return this.userPass;
    }

    public TIruenInfo setUserPass(String userPass) {
        this.userPass = userPass;
        return this;
    }

    public void unsetUserPass() {
        this.userPass = null;
    }

    /** Returns true if field userPass is set (has been assigned a value) and false otherwise */
    public boolean isSetUserPass() {
        return this.userPass != null;
    }

    public void setUserPassIsSet(boolean value) {
        if (!value) {
            this.userPass = null;
        }
    }

    public void setFieldValue(_Fields field, Object value) {
        switch (field) {
            case USER_NAME:
                if (value == null) {
                    unsetUserName();
                } else {
                    setUserName((String) value);
                }
                break;

            case USER_PASS:
                if (value == null) {
                    unsetUserPass();
                } else {
                    setUserPass((String) value);
                }
                break;

        }
    }

    public Object getFieldValue(_Fields field) {
        switch (field) {
            case USER_NAME:
                return getUserName();

            case USER_PASS:
                return getUserPass();

        }
        throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new IllegalArgumentException();
        }

        switch (field) {
            case USER_NAME:
                return isSetUserName();
            case USER_PASS:
                return isSetUserPass();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
        if (that == null)
            return false;
        if (that instanceof TIruenInfo)
            return this.equals((TIruenInfo) that);
        return false;
    }

    public boolean equals(TIruenInfo that) {
        if (that == null)
            return false;

        boolean this_present_userName = true && this.isSetUserName();
        boolean that_present_userName = true && that.isSetUserName();
        if (this_present_userName || that_present_userName) {
            if (!(this_present_userName && that_present_userName))
                return false;
            if (!this.userName.equals(that.userName))
                return false;
        }

        boolean this_present_userPass = true && this.isSetUserPass();
        boolean that_present_userPass = true && that.isSetUserPass();
        if (this_present_userPass || that_present_userPass) {
            if (!(this_present_userPass && that_present_userPass))
                return false;
            if (!this.userPass.equals(that.userPass))
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        List<Object> list = new ArrayList<Object>();

        boolean present_userName = true && (isSetUserName());
        list.add(present_userName);
        if (present_userName)
            list.add(userName);

        boolean present_userPass = true && (isSetUserPass());
        list.add(present_userPass);
        if (present_userPass)
            list.add(userPass);

        return list.hashCode();
    }

    @Override
    public int compareTo(TIruenInfo other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = Boolean.valueOf(isSetUserName()).compareTo(other.isSetUserName());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetUserName()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userName, other.userName);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetUserPass()).compareTo(other.isSetUserPass());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetUserPass()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userPass, other.userPass);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("TIruenInfo(");
        boolean first = true;

        if (isSetUserName()) {
            sb.append("userName:");
            if (this.userName == null) {
                sb.append("null");
            } else {
                sb.append(this.userName);
            }
            first = false;
        }
        if (isSetUserPass()) {
            if (!first) sb.append(", ");
            sb.append("userPass:");
            if (this.userPass == null) {
                sb.append("null");
            } else {
                sb.append(this.userPass);
            }
            first = false;
        }
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
        try {
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private static class TIruenInfoStandardSchemeFactory implements SchemeFactory {
        public TIruenInfoStandardScheme getScheme() {
            return new TIruenInfoStandardScheme();
        }
    }

    private static class TIruenInfoStandardScheme extends StandardScheme<TIruenInfo> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, TIruenInfo struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // USER_NAME
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.userName = iprot.readString();
                            struct.setUserNameIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // USER_PASS
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.userPass = iprot.readString();
                            struct.setUserPassIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, TIruenInfo struct) throws org.apache.thrift.TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (struct.userName != null) {
                if (struct.isSetUserName()) {
                    oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
                    oprot.writeString(struct.userName);
                    oprot.writeFieldEnd();
                }
            }
            if (struct.userPass != null) {
                if (struct.isSetUserPass()) {
                    oprot.writeFieldBegin(USER_PASS_FIELD_DESC);
                    oprot.writeString(struct.userPass);
                    oprot.writeFieldEnd();
                }
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class TIruenInfoTupleSchemeFactory implements SchemeFactory {
        public TIruenInfoTupleScheme getScheme() {
            return new TIruenInfoTupleScheme();
        }
    }

    private static class TIruenInfoTupleScheme extends TupleScheme<TIruenInfo> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, TIruenInfo struct) throws org.apache.thrift.TException {
            TTupleProtocol oprot = (TTupleProtocol) prot;
            BitSet optionals = new BitSet();
            if (struct.isSetUserName()) {
                optionals.set(0);
            }
            if (struct.isSetUserPass()) {
                optionals.set(1);
            }
            oprot.writeBitSet(optionals, 2);
            if (struct.isSetUserName()) {
                oprot.writeString(struct.userName);
            }
            if (struct.isSetUserPass()) {
                oprot.writeString(struct.userPass);
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, TIruenInfo struct) throws org.apache.thrift.TException {
            TTupleProtocol iprot = (TTupleProtocol) prot;
            BitSet incoming = iprot.readBitSet(2);
            if (incoming.get(0)) {
                struct.userName = iprot.readString();
                struct.setUserNameIsSet(true);
            }
            if (incoming.get(1)) {
                struct.userPass = iprot.readString();
                struct.setUserPassIsSet(true);
            }
        }
    }

}

